# MediaPipe graph that performs face detection with TensorFlow Lite on CPU.
# Used in the examples in
# mediapipe/examples/desktop/face_detection:face_detection_cpu.

# Images on GPU coming into and out of the graph.
input_stream: "input_video"
input_stream: "select"
input_stream: "prev_detection"
output_stream: "curr_detection"
output_stream: "output_video"

# VIDEO_PREP: Create a low frame rate stream for feature extraction.
# node {
#   calculator: "ImageDemuxCalculator"
#   input_stream: "IN_IMG:input_video"
#   input_stream: "SELECT:select"
#   output_stream: "OUT_IMG0:nop_in"
#   output_stream: "OUT_IMG1:autoframe_in"
#   output_stream: "OUT_IMG2:gesture_in"
#   output_stream: "OUT_IMG3:zoomin_in"
#   output_stream: "OUT_IMG4:zoomout_in"
# }

# # VIDEO_PREP: Create a low frame rate stream for feature extraction.
# node {
#   calculator: "DetectionDemuxCalculator"
#   input_stream: "IN:prev_detection"
#   input_stream: "SELECT:select"
#   output_stream: "OUT_NOOP:prev_detect_nop"
#   output_stream: "OUT_AUTOF:prev_detect_autoframe"
#   output_stream: "OUT_GESTURE:prev_detect_gesture"
#   output_stream: "OUT_ZIN:prev_detect_zoomin"
#   output_stream: "OUT_ZOUT:prev_detect_zoomout"
# }

# VIDEO_PREP: Create a low frame rate stream for feature extraction.
node {
  calculator: "GenericDemuxCalculator"
  input_stream: "IN:input_video"
  input_stream: "SELECT:select"
  output_stream: "nop_in"
  output_stream: "autoframe_in"
  output_stream: "gesture_in"
  output_stream: "zoomin_in"
  output_stream: "zoomout_in"
  output_stream: "reset_view"
}

# VIDEO_PREP: Create a low frame rate stream for feature extraction.
node {
  calculator: "GenericDemuxCalculator"
  input_stream: "IN:prev_detection"
  input_stream: "SELECT:select"
  output_stream: "prev_detect_nop"
  output_stream: "prev_detect_autoframe"
  output_stream: "prev_detect_gesture"
  output_stream: "prev_detect_zoomin"
  output_stream: "prev_detect_zoomout"
  output_stream: "prev_detect_resetview"
}

node {
  calculator: "NoopCalculator"
  input_stream: "IMAGE:nop_in"
  input_stream: "PREV_DETECTION:prev_detect_nop"
  output_stream: "DETECTION:noop_detection"
}

node {
  calculator: "AutoFrameSubgraph"
  input_stream: "IMAGE:autoframe_in"
  input_stream: "PREV_DETECTION:prev_detect_autoframe"
  output_stream: "DETECTION:autoframe_detection"
}
# node {
#   calculator: "HandGestureRecognitionSubgraph"
#   input_stream: "IMAGE:nop_in"
#   output_stream: "GESTURE:noop_detection"
# }

# node {
#   calculator: "HandGestureRecognitionSubgraph"
#   input_stream: "IMAGE:autoframe_in"
#   output_stream: "GESTURE:autoframe_detection"
# }

node {
  calculator: "HandGestureRecognitionSubgraph"
  input_stream: "IMAGE:gesture_in"
  output_stream: "GESTURE:gesture_detection"
}

# node {
#   calculator: "HandGestureRecognitionSubgraph"
#   input_stream: "IMAGE:zoomin_in"
#   output_stream: "GESTURE:zoom_in_detection"
# }

# node {
#   calculator: "HandGestureRecognitionSubgraph"
#   input_stream: "IMAGE:zoomout_in"
#   output_stream: "GESTURE:zoom_out_detection"
# }

node {
  calculator: "ZoomInCalculator"
  input_stream: "IMAGE:zoomin_in"
  input_stream: "PREV_DETECTION:prev_detect_zoomin"
  output_stream: "DETECTION:zoom_in_detection"
}

node {
  calculator: "ZoomOutCalculator"
  input_stream: "IMAGE:zoomout_in"
  input_stream: "PREV_DETECTION:prev_detect_zoomout"
  output_stream: "DETECTION:zoom_out_detection"
}

node {
  calculator: "ResetViewCalculator"
  input_stream: "IMAGE:reset_view"
  input_stream: "PREV_DETECTION:prev_detect_resetview"
  output_stream: "DETECTION:reset_view_detection"
}

node {
  calculator: "ImmediateMuxCalculator"
  input_stream: "noop_detection"
  input_stream: "gesture_detection"
  input_stream: "autoframe_detection"
  input_stream: "zoom_in_detection"
  input_stream: "zoom_out_detection"
  input_stream: "reset_view_detection"
  output_stream: "curr_detection"
  input_stream_handler {
    input_stream_handler: "ImmediateInputStreamHandler"
  }
}

node {
  calculator: "DetectionsToImageframeCalculator"
  input_stream: "IMAGE:input_video"
  input_stream: "DETECTION:prev_detection"
  output_stream: "IMAGE:output_video"
}
